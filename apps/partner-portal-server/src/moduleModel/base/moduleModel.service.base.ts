/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ModuleModel as PrismaModuleModel,
  License as PrismaLicense,
  Company as PrismaCompany,
} from "@prisma/client";

export class ModuleModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ModuleModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.moduleModel.count(args);
  }

  async moduleModels(
    args: Prisma.ModuleModelFindManyArgs
  ): Promise<PrismaModuleModel[]> {
    return this.prisma.moduleModel.findMany(args);
  }
  async moduleModel(
    args: Prisma.ModuleModelFindUniqueArgs
  ): Promise<PrismaModuleModel | null> {
    return this.prisma.moduleModel.findUnique(args);
  }
  async createModuleModel(
    args: Prisma.ModuleModelCreateArgs
  ): Promise<PrismaModuleModel> {
    return this.prisma.moduleModel.create(args);
  }
  async updateModuleModel(
    args: Prisma.ModuleModelUpdateArgs
  ): Promise<PrismaModuleModel> {
    return this.prisma.moduleModel.update(args);
  }
  async deleteModuleModel(
    args: Prisma.ModuleModelDeleteArgs
  ): Promise<PrismaModuleModel> {
    return this.prisma.moduleModel.delete(args);
  }

  async findLicenses(
    parentId: string,
    args: Prisma.LicenseFindManyArgs
  ): Promise<PrismaLicense[]> {
    return this.prisma.moduleModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .licenses(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.moduleModel
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
